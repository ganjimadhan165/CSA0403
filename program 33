#include <stdio.h>

#define MAX_FRAMES 10
#define MAX_PAGES 50

int findOptimal(int pages[], int frames[], int currentIndex, int pageCount, int frameCount) {
    int index[frameCount];
    int i, j;

    for (i = 0; i < frameCount; i++) {
        index[i] = -1;
        for (j = currentIndex + 1; j < pageCount; j++) {
            if (frames[i] == pages[j]) {
                index[i] = j;
                break;
            }
        }
    }

    int farthest = 0;
    for (i = 1; i < frameCount; i++) {
        if (index[i] == -1)
            return i;
        if (index[i] > index[farthest])
            farthest = i;
    }

    return farthest;
}

int main() {
    int frames[MAX_FRAMES];
    int pages[MAX_PAGES];
    int pageCount, frameCount;
    int i, j, k, pageFaults = 0;
    int found, replaced;

    // Initialize frames
    for (i = 0; i < MAX_FRAMES; i++) {
        frames[i] = -1;
    }

    // Input number of frames
    printf("Enter number of frames: ");
    scanf("%d", &frameCount);

    // Input number of pages
    printf("Enter number of pages: ");
    scanf("%d", &pageCount);

    // Input page reference string
    printf("Enter the page reference string:\n");
    for (i = 0; i < pageCount; i++) {
        scanf("%d", &pages[i]);
    }

    printf("\nOptimal Page Replacement Simulation:\n");

    for (i = 0; i < pageCount; i++) {
        found = 0;

        // Check if the page is already in frame
        for (j = 0; j < frameCount; j++) {
            if (frames[j] == pages[i]) {
                found = 1;
                break;
            }
        }

        // If not found, it's a page fault
        if (!found) {
            pageFaults++;

            // If there is an empty frame, use it
            for (j = 0; j < frameCount; j++) {
                if (frames[j] == -1) {
                    frames[j] = pages[i];
                    found = 1;
                    break;
                }
            }

            // If no empty frame, find the optimal one to replace
            if (!found) {
                replaced = findOptimal(pages, frames, i, pageCount, frameCount);
                frames[replaced] = pages[i];
            }

            // Print current frame state
            printf("Page %d -> ", pages[i]);
            for (k = 0; k < frameCount; k++) {
                if (frames[k] == -1)
                    printf("- ");
                else
                    printf("%d ", frames[k]);
            }
            printf("(Page Fault)\n");
        } else {
            printf("Page %d -> Hit (No page fault)\n", pages[i]);
        }
    }

    printf("\nTotal Page Faults = %d\n", pageFaults);
    return 0;
}
