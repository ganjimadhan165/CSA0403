#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int process_id;      // Process ID
    int burst_time;      // CPU Burst Time
    int arrival_time;    // Arrival Time
    int priority;        // Priority of the process
    int waiting_time;    // Waiting Time
    int turnaround_time; // Turnaround Time
    int completion_time; // Completion Time
    int remaining_time;  // Remaining time for the process (for preemption)
} Process;

void calculate_preemptive_priority(Process processes[], int n) {
    int time = 0;
    int completed = 0;
    int total_waiting_time = 0, total_turnaround_time = 0;

    // Initialize remaining_time to burst_time for each process
    for (int i = 0; i < n; i++) {
        processes[i].remaining_time = processes[i].burst_time;
    }

    printf("\nProcess\tBurst Time\tArrival Time\tPriority\tCompletion Time\tTurnaround Time\tWaiting Time\n");

    // Preemptive Priority Scheduling
    while (completed < n) {
        int idx = -1;
        int min_priority = 1000000;

        // Select the process with the highest priority (lowest priority value)
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0 && processes[i].arrival_time <= time && processes[i].priority < min_priority) {
                min_priority = processes[i].priority;
                idx = i;
            }
        }

        if (idx != -1) {
            // Process selected to run
            processes[idx].remaining_time--; // Reduce the remaining time of the process
            time++; // Increment time

            // If process finishes execution
            if (processes[idx].remaining_time == 0) {
                completed++;
                processes[idx].completion_time = time;
                processes[idx].turnaround_time = processes[idx].completion_time - processes[idx].arrival_time;
                processes[idx].waiting_time = processes[idx].turnaround_time - processes[idx].burst_time;

                total_waiting_time += processes[idx].waiting_time;
                total_turnaround_time += processes[idx].turnaround_time;

                // Display process information when it completes
                printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[idx].process_id, processes[idx].burst_time,
                       processes[idx].arrival_time, processes[idx].priority, processes[idx].completion_time,
                       processes[idx].turnaround_time, processes[idx].waiting_time);
            }
        }
    }

    // Calculate average waiting time and average turnaround time
    float avg_waiting_time = (float)total_waiting_time / n;
    float avg_turnaround_time = (float)total_turnaround_time / n;

    printf("\nAverage Waiting Time: %.2f", avg_waiting_time);
    printf("\nAverage Turnaround Time: %.2f\n", avg_turnaround_time);
}

int main() {
    int n;

    // Input number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n];

    // Input burst time, arrival time, and priority for each process
    for (int i = 0; i < n; i++) {
        processes[i].process_id = i + 1;
        printf("\nEnter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
        printf("Enter priority for process %d (lower value means higher priority): ", i + 1);
        scanf("%d", &processes[i].priority);
    }

    // Calculate and display Preemptive Priority Scheduling results
    calculate_preemptive_priority(processes, n);

    return 0;
}
