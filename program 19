#include <stdio.h>
#include <pthread.h>

// Shared resource (counter)
int counter = 0;

// Mutex lock to protect the shared resource
pthread_mutex_t lock;

// Function to increment the counter (simulating a critical section)
void* increment_counter(void* arg) {
    for (int i = 0; i < 1000000; i++) {
        // Lock the mutex to ensure mutual exclusion
        pthread_mutex_lock(&lock);
        
        // Critical section - increment the counter
        counter++;
        
        // Unlock the mutex after modifying the counter
        pthread_mutex_unlock(&lock);
    }
    return NULL;
}

int main() {
    pthread_t threads[10];  // Array to hold thread identifiers
    int num_threads = 10;   // Number of threads

    // Initialize the mutex lock
    pthread_mutex_init(&lock, NULL);

    // Create multiple threads to increment the counter
    for (int i = 0; i < num_threads; i++) {
        pthread_create(&threads[i], NULL, increment_counter, NULL);
    }

    // Wait for all threads to complete
    for (int i = 0; i < num_threads; i++) {
        pthread_join(threads[i], NULL);
    }

    // Print the final value of the counter
    printf("Final counter value: %d\n", counter);

    // Destroy the mutex lock
    pthread_mutex_destroy(&lock);

    return 0;
}
