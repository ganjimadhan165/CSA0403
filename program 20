#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define NUM_READERS 5
#define NUM_WRITERS 2

// Shared resource
int data = 0;

// Semaphores
sem_t mutex, write_sem, read_count_sem;
int read_count = 0;  // Number of readers currently reading

// Reader function
void* reader(void* arg) {
    int reader_id = *((int*)arg);

    while (1) {
        // Reader wants to enter
        sem_wait(&read_count_sem);
        sem_wait(&mutex);
        read_count++;
        if (read_count == 1) {
            // If this is the first reader, block writers
            sem_wait(&write_sem);
        }
        sem_post(&mutex);
        sem_post(&read_count_sem);

        // Reading the shared resource
        printf("Reader %d: Read data = %d\n", reader_id, data);
        sleep(1);  // Simulate reading time

        // Reader is leaving
        sem_wait(&mutex);
        read_count--;
        if (read_count == 0) {
            // If this was the last reader, release the writer
            sem_post(&write_sem);
        }
        sem_post(&mutex);
    }

    return NULL;
}

// Writer function
void* writer(void* arg) {
    int writer_id = *((int*)arg);

    while (1) {
        // Writer wants to enter
        sem_wait(&write_sem);

        // Writing to the shared resource
        data++;
        printf("Writer %d: Written data = %d\n", writer_id, data);
        sleep(2);  // Simulate writing time

        // Writer is leaving
        sem_post(&write_sem);
    }

    return NULL;
}

int main() {
    pthread_t readers[NUM_READERS], writers[NUM_WRITERS];
    int reader_ids[NUM_READERS], writer_ids[NUM_WRITERS];

    // Initialize semaphores
    sem_init(&mutex, 0, 1);           // Mutex for mutual exclusion of read_count
    sem_init(&write_sem, 0, 1);       // Semaphore to allow one writer at a time
    sem_init(&read_count_sem, 0, 1);  // Semaphore for controlling access to read_count

    // Create reader threads
    for (int i = 0; i < NUM_READERS; i++) {
        reader_ids[i] = i + 1;
        pthread_create(&readers[i], NULL, reader, (void*)&reader_ids[i]);
    }

    // Create writer threads
    for (int i = 0; i < NUM_WRITERS; i++) {
        writer_ids[i] = i + 1;
        pthread_create(&writers[i], NULL, writer, (void*)&writer_ids[i]);
    }

    // Join threads (this will never return as the threads run indefinitely)
    for (int i = 0; i < NUM_READERS; i++) {
        pthread_join(readers[i], NULL);
    }

    for (int i = 0; i < NUM_WRITERS; i++) {
        pthread_join(writers[i], NULL);
    }

    // Destroy semaphores (this part won't execute in this infinite loop)
    sem_destroy(&mutex);
    sem_destroy(&write_sem);
    sem_destroy(&read_count_sem);

    return 0;
}
