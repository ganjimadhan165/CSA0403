#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int process_id;      // Process ID
    int burst_time;      // CPU Burst Time
    int priority;        // Priority of the process
    int waiting_time;    // Waiting Time
    int turnaround_time; // Turnaround Time
    int completion_time; // Completion Time
} Process;

// Function to compare two processes based on their priority (for Priority Scheduling)
int compare(const void* a, const void* b) {
    Process* processA = (Process*)a;
    Process* processB = (Process*)b;
    return processA->priority - processB->priority; // Ascending order of priority
}

void calculate_priority_scheduling(Process processes[], int n) {
    int total_waiting_time = 0, total_turnaround_time = 0;

    // Sort processes by priority
    qsort(processes, n, sizeof(Process), compare);

    // Calculate waiting time, turnaround time, and completion time for each process
    processes[0].waiting_time = 0;  // First process does not wait
    processes[0].completion_time = processes[0].burst_time;

    for (int i = 1; i < n; i++) {
        processes[i].waiting_time = processes[i - 1].completion_time;
        processes[i].turnaround_time = processes[i].waiting_time + processes[i].burst_time;
        processes[i].completion_time = processes[i].turnaround_time;

        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    // Calculate average waiting time and average turnaround time
    float avg_waiting_time = (float)total_waiting_time / n;
    float avg_turnaround_time = (float)total_turnaround_time / n;

    // Display results
    printf("Process\tBurst Time\tPriority\tWaiting Time\tTurnaround Time\tCompletion Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].process_id, processes[i].burst_time,
               processes[i].priority, processes[i].waiting_time, processes[i].turnaround_time, processes[i].completion_time);
    }

    printf("\nAverage Waiting Time: %.2f", avg_waiting_time);
    printf("\nAverage Turnaround Time: %.2f\n", avg_turnaround_time);
}

int main() {
    int n;

    // Input number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n];

    // Input burst time and priority for each process
    for (int i = 0; i < n; i++) {
        processes[i].process_id = i + 1;
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        printf("Enter priority for process %d (lower value means higher priority): ", i + 1);
        scanf("%d", &processes[i].priority);
    }

    // Calculate and display Priority Scheduling results
    calculate_priority_scheduling(processes, n);

    return 0;
}
