#include <stdio.h>

typedef struct {
    int process_id;      // Process ID
    int burst_time;      // CPU Burst Time
    int remaining_time;  // Remaining time for the process
    int arrival_time;    // Arrival Time
    int waiting_time;    // Waiting Time
    int turnaround_time; // Turnaround Time
    int completion_time; // Completion Time
} Process;

void calculate_rr(Process processes[], int n, int quantum) {
    int time = 0;
    int completed = 0;
    int total_waiting_time = 0, total_turnaround_time = 0;

    printf("\nProcess\tBurst Time\tArrival Time\tCompletion Time\tTurnaround Time\tWaiting Time\n");

    // Initially, set remaining time to burst time for each process
    for (int i = 0; i < n; i++) {
        processes[i].remaining_time = processes[i].burst_time;
    }

    // Round Robin Scheduling
    while (completed < n) {
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
                int exec_time = (processes[i].remaining_time < quantum) ? processes[i].remaining_time : quantum;

                // Execute the process for the time quantum
                time += exec_time;
                processes[i].remaining_time -= exec_time;

                // If the process is finished
                if (processes[i].remaining_time == 0) {
                    completed++;
                    processes[i].completion_time = time;
                    processes[i].turnaround_time = processes[i].completion_time - processes[i].arrival_time;
                    processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;

                    total_waiting_time += processes[i].waiting_time;
                    total_turnaround_time += processes[i].turnaround_time;

                    // Print the process info when it's completed
                    printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].process_id, processes[i].burst_time,
                           processes[i].arrival_time, processes[i].completion_time, processes[i].turnaround_time, processes[i].waiting_time);
                }
            }
        }
    }

    // Calculate and display average waiting time and turnaround time
    float avg_waiting_time = (float)total_waiting_time / n;
    float avg_turnaround_time = (float)total_turnaround_time / n;

    printf("\nAverage Waiting Time: %.2f", avg_waiting_time);
    printf("\nAverage Turnaround Time: %.2f\n", avg_turnaround_time);
}

int main() {
    int n, quantum;

    // Input the number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n];

    // Input burst time and arrival time for each process
    for (int i = 0; i < n; i++) {
        processes[i].process_id = i + 1;
        printf("\nEnter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
    }

    // Input the time quantum
    printf("Enter time quantum: ");
    scanf("%d", &quantum);

    // Calculate and display Round Robin Scheduling results
    calculate_rr(processes, n, quantum);

    return 0;
}
