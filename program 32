#include <stdio.h>

#define MAX_FRAMES 10
#define MAX_PAGES 50

int main() {
    int frames[MAX_FRAMES], recent[MAX_FRAMES];
    int pageSequence[MAX_PAGES];
    int frameCount, pageCount;
    int i, j, k, pageFaults = 0, leastRecentIndex;

    // Initialize frames and recent usage tracker
    for (i = 0; i < MAX_FRAMES; i++) {
        frames[i] = -1;
        recent[i] = -1;
    }

    // Input number of frames
    printf("Enter number of frames: ");
    scanf("%d", &frameCount);

    // Input number of pages
    printf("Enter number of pages: ");
    scanf("%d", &pageCount);

    // Input page reference string
    printf("Enter the page reference string:\n");
    for (i = 0; i < pageCount; i++) {
        scanf("%d", &pageSequence[i]);
    }

    printf("\nLRU Page Replacement Process:\n");

    // Process each page
    for (i = 0; i < pageCount; i++) {
        int page = pageSequence[i];
        int found = 0;

        // Check if page is already in a frame
        for (j = 0; j < frameCount; j++) {
            if (frames[j] == page) {
                found = 1;
                recent[j] = i;  // Update recent usage
                break;
            }
        }

        // If page is not found (page fault)
        if (!found) {
            pageFaults++;

            // Find the least recently used page index
            int lruIndex = 0;
            for (j = 1; j < frameCount; j++) {
                if (recent[j] < recent[lruIndex]) {
                    lruIndex = j;
                }
            }

            // Replace LRU page
            frames[lruIndex] = page;
            recent[lruIndex] = i;

            printf("Page %d -> ", page);
            for (k = 0; k < frameCount; k++) {
                if (frames[k] == -1)
                    printf("- ");
                else
                    printf("%d ", frames[k]);
            }
            printf("(Page Fault)\n");
        } else {
            printf("Page %d -> Hit (No page fault)\n", page);
        }
    }

    printf("\nTotal Page Faults = %d\n", pageFaults);

    return 0;
}
