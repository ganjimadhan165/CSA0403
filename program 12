#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5  // Number of philosophers

// Define the mutexes (forks)
pthread_mutex_t forks[NUM_PHILOSOPHERS];

// Function to simulate a philosopher thinking and eating
void* philosopher(void* num) {
    int philosopher_id = *(int*)num;

    while (1) {
        // Think
        printf("Philosopher %d is thinking.\n", philosopher_id);
        sleep(rand() % 3);  // Thinking for a random time

        // Try to pick up the forks (left and right)
        pthread_mutex_lock(&forks[philosopher_id]);  // Pick up the left fork
        pthread_mutex_lock(&forks[(philosopher_id + 1) % NUM_PHILOSOPHERS]);  // Pick up the right fork

        // Eat
        printf("Philosopher %d is eating.\n", philosopher_id);
        sleep(rand() % 3);  // Eating for a random time

        // Put down the forks (left and right)
        pthread_mutex_unlock(&forks[philosopher_id]);
        pthread_mutex_unlock(&forks[(philosopher_id + 1) % NUM_PHILOSOPHERS]);

        // Pause before thinking again
        printf("Philosopher %d finished eating and is now thinking again.\n", philosopher_id);
    }

    return NULL;
}

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int philosopher_ids[NUM_PHILOSOPHERS];

    // Initialize the mutexes for each fork
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&forks[i], NULL);
    }

    // Create philosopher threads
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        philosopher_ids[i] = i;  // Assign philosopher number
        if (pthread_create(&philosophers[i], NULL, philosopher, &philosopher_ids[i]) != 0) {
            perror("Failed to create thread");
            exit(1);
        }
    }

    // Wait for all philosopher threads to complete (this won't happen in this infinite loop)
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    // Destroy the mutexes
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_destroy(&forks[i]);
    }

    return 0;
}
